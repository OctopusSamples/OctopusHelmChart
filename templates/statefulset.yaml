apiVersion: v1
data:
  {{- if .Values.octopus.username }}
  adminUsername: {{.Values.octopus.username | b64enc}}
  {{- end}}
  {{- if .Values.octopus.password }}
  adminPassword: {{.Values.octopus.password | b64enc}}
  {{- end}}
  {{- if .Values.octopus.licenseKeyBase64 }}
  licenseKey: {{.Values.octopus.licenseKeyBase64 | b64enc}}
  {{- end}}
  masterKey: {{.Values.octopus.masterKey | b64enc}}
  dbConnString: {{ tpl .Values.octopus.connectionString . | b64enc}}
kind: Secret
metadata:
  name: octopus-secrets
type: Opaque
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: octopus
  {{- if .Values.octopus.statefulSet.annotations }}
  annotations:
  {{ toYaml .Values.octopus.statefulSet.annotations | indent 2 }}
  {{- end }}
  {{- if .Values.octopus.statefulSet.labels }}
  labels:
  {{ toYaml .Values.octopus.statefulSet.labels | indent 2 }}
  {{- end }}
spec:
  selector:
    matchLabels:
      app: octopus
  serviceName: "octopus"
  replicas: {{.Values.octopus.replicaCount}}
  template:
    metadata:
      labels:
        app: octopus
      {{- if .Values.octopus.pods.labels }}
      {{ toYaml .Values.octopus.pods.labels | indent 2 }}
      {{- end }}
      {{- if .Values.octopus.pods.annotations }}
      annotations:
      {{ toYaml .Values.octopus.pods.annotations | indent 2 }}
      {{- end }}
    spec:
      affinity:
        # Try and keep Octopus nodes on separate Kubernetes nodes
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - octopus
                topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 10
      volumes:
        - name: repository-vol
          persistentVolumeClaim:
            claimName: repository-claim
        - name: artifacts-vol
          persistentVolumeClaim:
            claimName: artifacts-claim
        - name: task-logs-vol
          persistentVolumeClaim:
            claimName: task-logs-claim
{{- if .Values.dockerHub.login }}
      imagePullSecrets:
        - name: dockerhubcreds
{{- end }}
      containers:
        - name: octopus
          image: {{.Values.octopus.image}}
          securityContext:
            {{- if .Values.octopus.enableDockerInDocker }}
            privileged: true
            {{- end }}
          env:
            - name: ACCEPT_EULA
              value: !!str "{{.Values.octopus.acceptEula}}"
            - name: OCTOPUS_SERVER_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: DB_CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  name: octopus-secrets
                  key: dbConnString
            {{- if .Values.octopus.username }}
            - name: ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: octopus-secrets
                  key: adminUsername
            {{- end}}
            {{- if .Values.octopus.password }}
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: octopus-secrets
                  key: adminPassword
            {{- end}}
            - name: ADMIN_EMAIL
              value: {{.Values.octopus.email}}
            {{- if .Values.octopus.licenseKeyBase64 }}
            - name: OCTOPUS_SERVER_BASE64_LICENSE
              # Your license key goes here. When using more than one node, a HA license is required.
              # Without a HA license, the stateful set can have a replica count of 1.
              valueFrom:
                secretKeyRef:
                  name: octopus-secrets
                  key: licenseKey
            {{- end}}
            - name: MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: octopus-secrets
                  key: masterKey
          {{- if not .Values.octopus.enableDockerInDocker }}
            - name: DISABLE_DIND
              value: !!str "Y"
          {{- end }}
          ports:
            - containerPort: 8080
              name: web
            - containerPort: 10943
              name: tentacle
          volumeMounts:
            - name: repository-vol
              mountPath: /repository
            - name: artifacts-vol
              mountPath: /artifacts
            - name: task-logs-vol
              mountPath: /taskLogs
            - name: server-logs-vol
              mountPath: /home/octopus/.octopus/OctopusServer/Server/Logs
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - '[[ -f /Octopus/Octopus.Server ]] && EXE="/Octopus/Octopus.Server" || EXE="dotnet /Octopus/Octopus.Server.dll"; $EXE node --instance=OctopusServer --drain=true --wait=600 --cancel-tasks;'
            # postStart must finish in 5 minutes or the container will fail to create
            postStart:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - 'URL=http://localhost:8080; x=0; while [ $x -lt 9 ]; do response=$(/usr/bin/curl -k $URL/api/octopusservernodes/ping --write-out %{http_code} --silent --output /dev/null); if [ "$response" -ge 200 ] && [ "$response" -le 299 ]; then break; fi; if [ "$response" -eq 418 ]; then [[ -f /Octopus/Octopus.Server ]] && EXE="/Octopus/Octopus.Server" || EXE="dotnet /Octopus/Octopus.Server.dll"; $EXE node --instance=OctopusServer --drain=false; now=$(date); echo "${now} Server cancelling drain mode." break; fi; now=$(date); echo "${now} Server is not ready, can not disable drain mode."; sleep 30; done;'
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - URL=http://localhost:8080; response=$(/usr/bin/curl -k $URL/api/serverstatus/hosted/internal --write-out %{http_code} --silent --output /dev/null); /usr/bin/test "$response" -ge 200 && /usr/bin/test "$response" -le 299 || /usr/bin/test
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 60
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - URL=http://localhost:8080; response=$(/usr/bin/curl -k $URL/api/octopusservernodes/ping --write-out %{http_code} --silent --output /dev/null); /usr/bin/test "$response" -ge 200 && /usr/bin/test "$response" -le 299 || /usr/bin/test "$response" -eq 418
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 10
          startupProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - URL=http://localhost:8080; response=$(/usr/bin/curl -k $URL/api/octopusservernodes/ping --write-out %{http_code} --silent --output /dev/null); /usr/bin/test "$response" -ge 200 && /usr/bin/test "$response" -le 299 || /usr/bin/test "$response" -eq 418
            failureThreshold: 30
            periodSeconds: 60
  volumeClaimTemplates:
    - metadata:
        name: server-logs-vol
      spec:
        accessModes: [ "ReadWriteOnce" ]
        {{- if (eq "-" (.Values.octopus.storageClassName | toString)) }}
        storageClassName: ""
        {{- else if .Values.octopus.storageClassName }}
        storageClassName: "{{ .Values.octopus.storageClassName }}"
        {{- end }}
        resources:
          requests:
            storage: {{.Values.octopus.logVolumeSize}}